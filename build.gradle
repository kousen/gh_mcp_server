plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'com.kousenit'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springAiVersion', "1.0.0")
}

dependencies {
    implementation 'org.springframework.ai:spring-ai-starter-mcp-server'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

tasks.named('test', Test) {
    useJUnitPlatform()
}

bootRun {
    // Enable virtual threads and optimize for development
    jvmArgs '--enable-preview', '-XX:+UseZGC'
}

spotless {
    java {
        // Use Google Java Format
        googleJavaFormat('1.19.2')
        
        // Remove unused imports
        removeUnusedImports()
        
        // License header formatting disabled - uncomment if needed
        // licenseHeaderFile rootProject.file('LICENSE-HEADER')
        
        // Exclude build directories
        targetExclude 'build/**'
    }
}

// Make compileJava depend on spotlessApply to ensure code is formatted before compilation
compileJava.dependsOn spotlessApply

// Task to create version-independent symlink
tasks.register('createSymlink') {
    description = 'Creates a version-independent symlink to the JAR file'
    group = 'build'
    
    dependsOn bootJar
    
    doLast {
        def libsDir = file("${buildDir}/libs")
        def versionedJar = file("${libsDir}/${project.name}-${project.version}.jar")
        def symlinkJar = file("${libsDir}/${project.name}.jar")
        
        if (versionedJar.exists()) {
            // Remove existing symlink if it exists
            if (symlinkJar.exists()) {
                symlinkJar.delete()
            }
            
            // Create new symlink
            ant.symlink(link: symlinkJar, resource: versionedJar.name)
            println "Created symlink: ${symlinkJar.name} -> ${versionedJar.name}"
        } else {
            println "Warning: Versioned JAR not found at ${versionedJar}"
        }
    }
}

// Automatically create symlink after building
build.finalizedBy createSymlink
